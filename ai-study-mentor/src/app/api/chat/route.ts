import { NextRequest, NextResponse } from "next/server";
import { verifyToken } from "@/lib/jwt";
import { searchSimilarDocuments } from "@/lib/pinecone";
import { generateEmbeddings } from "@/lib/documentProcessor";

export async function POST(request: NextRequest) {
  try {
    // Verifiera JWT token (fr√•n header eller cookies)
    const token =
      request.headers.get("authorization")?.replace("Bearer ", "") ||
      request.cookies.get("auth-token")?.value;

    console.log("üí¨ Chat API anropad, token finns:", !!token);

    if (!token) {
      return NextResponse.json(
        { error: "Ingen autentisering angiven" },
        { status: 401 }
      );
    }

    const user = verifyToken(token);
    if (!user) {
      return NextResponse.json({ error: "Ogiltig token" }, { status: 401 });
    }

    // H√§mta fr√•gan fr√•n request body
    const requestBody = await request.json();
    console.log("üìù Request body:", requestBody);

    const { message, conversationHistory = [] } = requestBody;
    console.log(
      "üí¨ Message:",
      message,
      "Type:",
      typeof message,
      "Length:",
      message?.length
    );

    if (
      !message ||
      typeof message !== "string" ||
      message.trim().length === 0
    ) {
      console.log("‚ùå Message validation failed");
      return NextResponse.json(
        { error: "Meddelande saknas eller √§r tomt" },
        { status: 400 }
      );
    }

    console.log(`ü§î Anv√§ndare ${user.userId} fr√•gar: "${message}"`);

    // Steg 1: Generera embedding f√∂r anv√§ndarfr√•gan
    console.log("üß† Genererar embedding f√∂r fr√•gan...");
    const questionEmbeddings = await generateEmbeddings([message.trim()]);
    const questionEmbedding = questionEmbeddings[0];

    // Steg 2: S√∂k liknande dokument i Pinecone
    console.log("üîç S√∂ker relevanta dokument...");
    const relevantDocuments = await searchSimilarDocuments(
      questionEmbedding,
      user.userId,
      5 // H√§mta top 5 mest relevanta chunks
    );

    if (relevantDocuments.length === 0) {
      return NextResponse.json({
        response:
          "Jag kunde inte hitta n√•got relevant inneh√•ll i dina uppladdade dokument f√∂r den fr√•gan. Prova att ladda upp mer material eller omformulera din fr√•ga.",
        sources: [],
        conversationId: `conv_${Date.now()}`,
      });
    }

    // Steg 3: F√∂rbered kontext f√∂r AI-modellen
    const context = relevantDocuments
      .map((doc, index) => `[K√§lla ${index + 1}]: ${doc.text}`)
      .join("\n\n");

    // Steg 4: Generera svar med Ollama
    console.log("ü§ñ Genererar AI-svar...");
    const aiResponse = await generateAIResponse(
      message,
      context,
      conversationHistory
    );

    // Steg 5: F√∂rbered k√§llor f√∂r frontend
    const sources = relevantDocuments.map((doc, index) => ({
      id: index + 1,
      text: doc.text.substring(0, 200) + (doc.text.length > 200 ? "..." : ""),
      score: doc.score,
      fileName: doc.fileName || "Ok√§nd k√§lla",
      chunkIndex: doc.chunkIndex || 0,
    }));

    return NextResponse.json({
      response: aiResponse,
      sources,
      conversationId: `conv_${Date.now()}`,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("Fel vid AI-chat:", error);

    return NextResponse.json(
      {
        error:
          "Ett fel uppstod vid bearbetning av din fr√•ga. F√∂rs√∂k igen senare.",
        details: error instanceof Error ? error.message : "Ok√§nt fel",
      },
      { status: 500 }
    );
  }
}

/**
 * Genererar AI-svar med hj√§lp av Ollama
 */
async function generateAIResponse(
  question: string,
  context: string,
  conversationHistory: Array<{ role: string; content: string }> = []
): Promise<string> {
  const ollamaBaseUrl = process.env.OLLAMA_BASE_URL || "http://localhost:11434";

  // Bygg konversationskontext
  let conversationContext = "";
  if (conversationHistory.length > 0) {
    conversationContext =
      "\nTidigare konversation:\n" +
      conversationHistory
        .slice(-4) // Bara de senaste 4 meddelandena f√∂r att h√•lla kontexten hanterbar
        .map((msg) => `${msg.role}: ${msg.content}`)
        .join("\n") +
      "\n";
  }

  const prompt = `Du √§r en hj√§lpsam AI-assistent som svarar p√• fr√•gor baserat p√• tillhandah√•llen information. Svara alltid p√• svenska och var tydlig och informativ.

${conversationContext}

Baserat p√• f√∂ljande information fr√•n anv√§ndarens dokument:

${context}

Fr√•ga: ${question}

Svar p√• svenska baserat p√• informationen ovan. Om informationen inte r√§cker f√∂r att svara p√• fr√•gan, s√§g det tydligt. Referera g√§rna till specifika delar av texten n√§r det √§r relevant.

Svar:`;

  try {
    console.log(
      "üöÄ Skickar request till Ollama:",
      `${ollamaBaseUrl}/api/generate`
    );

    const response = await fetch(`${ollamaBaseUrl}/api/generate`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "llama3.2:1b", // Mindre modell som passar i systemets minne (1.5GB vs 6GB)
        prompt: prompt,
        stream: false,
        options: {
          temperature: 0.7,
          top_p: 0.9,
          max_tokens: 300, // Begr√§nsa f√∂r mindre modell
        },
      }),
    });

    console.log("üì° Ollama response status:", response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.log("‚ùå Ollama error response:", errorText);
      throw new Error(`Ollama API fel: ${response.status} - ${errorText}`);
    }

    const data = await response.json();

    if (!data.response) {
      throw new Error("Inget svar fr√•n Ollama");
    }

    return data.response.trim();
  } catch (error) {
    console.error("Fel vid AI-svar generering:", error);

    // Fallback till en enkel sammanfattning av kontexten
    return `Baserat p√• dina dokument kan jag se information om: ${context.substring(
      0,
      300
    )}... 

Jag har f√∂r n√§rvarande tekniska problem med AI-svars genereringen. Prova att omformulera din fr√•ga eller kontakta support om problemet kvarst√•r.`;
  }
}
